import * as Print from "expo-print";
import * as Sharing from "expo-sharing";
import * as FileSystem from "expo-file-system";
import * as IntentLauncher from "expo-intent-launcher";
import { Prescription, PrescribedMedicine } from "@/interfaces";
import { Platform } from "react-native";

interface DoctorDetails {
    name: string;
    education: string;
    phone: string;
    location: string;
}

/**
 * Generate a prescription PDF
 * @param {DoctorDetails} doctor - Doctor's information
 * @param {PrescriptionDetails} prescription - Prescription details
 */
export const generatePrescriptionPDF = async (doctor: DoctorDetails, prescription: Prescription, openShareDialog: boolean = false) => {
    const { name, education, phone, location } = doctor;
    const { name: patient_name, age, pressure, diabetic, blood, medicines } = prescription;

    const htmlContent = `
    <html>
    <head>
        <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            h1, h2 { text-align: center; }
            .container { width: 100%; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #ddd; }
            .doctor-info, .patient-info { margin-bottom: 20px; padding: 10px; border-bottom: 1px solid #ddd; }
            .medicine-table { width: 100%; border-collapse: collapse; margin-top: 10px; }
            .medicine-table th, .medicine-table td { border: 1px solid #ddd; padding: 8px; text-align: center; }
            .footer { margin-top: 20px; text-align: center; font-size: 12px; color: #777; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Prescription</h1>
            <div class="doctor-info">
                <h2>Dr. ${name}</h2>
                <p><strong>Education:</strong> ${education}</p>
                <p><strong>Phone:</strong> ${phone}</p>
                <p><strong>Location:</strong> ${location}</p>
            </div>
            <div class="patient-info">
                <h2>Patient Details</h2>
                <p><strong>Name:</strong> ${patient_name}</p>
                <p><strong>Age:</strong> ${age}</p>
                <p><strong>Blood Pressure:</strong> ${pressure}</p>
                <p><strong>Diabetic:</strong> ${diabetic}</p>
                <p><strong>Blood Group:</strong> ${blood}</p>
            </div>
            <h2>Prescribed Medicines</h2>
            <table class="medicine-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Power</th>
                        <th>Mealtime</th>
                        <th>Days</th>
                        <th>Note</th>
                    </tr>
                </thead>
                <tbody>
                    ${medicines.map(med => `
                        <tr>
                            <td>${med.name}</td>
                            <td>${med.power}</td>
                            <td>${formatMealtime(med.medicineMealtime)}</td>
                            <td>${med.days}</td>
                            <td>${med.note ?? "-"}</td>
                        </tr>
                    `).join("")}
                </tbody>
            </table>
            <div class="footer">Generated by Prescription App</div>
        </div>
    </body>
    </html>
    `;

    // Generate the PDF
    const { uri } = await Print.printToFileAsync({ html: htmlContent });

    // Define a local file path
    const pdfPath = `${FileSystem.documentDirectory}prescription.pdf`;
    const convertUri = await FileSystem.getContentUriAsync(pdfPath);
    console.log({ uri, pdfPath, convertUri });

    // Move the PDF to a readable location
    await FileSystem.moveAsync({ from: uri, to: pdfPath });

    console.log("PDF saved at:", convertUri);

    // Open the PDF based on platform
    if (Platform.OS === "ios" || openShareDialog) {
        try {
            await Sharing.shareAsync(pdfPath); // Open share dialog (iOS does not support direct opening)
        } catch (error) {
            console.log({ error });
        }
    } else if (Platform.OS === "android") {
        try {
            await IntentLauncher.startActivityAsync("android.intent.action.VIEW", {
                data: convertUri,
                type: "application/pdf",
                flags: 1,
            });
        } catch (error) {
            console.log({ error });
        }

    }
    return uri; // Return file URI if needed
};

/**
 * Format mealtime object to a readable string
 * @param {any} mealtime - Mealtime object
 * @returns {string} - Formatted mealtime
 */
const formatMealtime = (mealtime: any): string => {
    try {
        const parsed = typeof mealtime === "string" ? JSON.parse(mealtime) : mealtime;
        return [
            parsed.morning ? "Morning" : null,
            parsed.noon ? "Noon" : null,
            parsed.night ? "Night" : null
        ].filter(Boolean).join(", ");
    } catch (error) {
        return "-";
    }
};